// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name nlekycsdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import Alamofire
import AudioToolbox
import Combine
import CoreImage
import CoreVideo
import DeveloperToolsSupport
import FlashLiveness
import FontAwesome_iOS
import Foundation
import IDCardReader
import KeychainSwift
import LivenessCloud
import ObjectMapper
import OpenSSL
import QKMRZParser
import SVProgressHUD
import Swift
import SwiftUI
import SwiftyTesseract
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NewYorkButton : UIKit.UIButton {
  public enum Style {
    case `default`
    case cancel
    case destructive
    case preferred
    public static func == (a: nlekycsdk.NewYorkButton.Style, b: nlekycsdk.NewYorkButton.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, style: nlekycsdk.NewYorkButton.Style, handler: ((nlekycsdk.NewYorkButton) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public func setDynamicColor(_ color: nlekycsdk.NewYorkDynamicColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class NLeKYCSdkManager : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func initSDK()
  @_Concurrency.MainActor @preconcurrency public func scanMRZ()
  @_Concurrency.MainActor @preconcurrency public func scanNFC() -> Swift.String
  @_Concurrency.MainActor @preconcurrency public func livenessCheck(clienttransaction: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class RPicker : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum NewYorkDynamicColor {
  case red
  case orange
  case yellow
  case green
  case teal
  case blue
  case indigo
  case purple
  case pink
  public static func == (a: nlekycsdk.NewYorkDynamicColor, b: nlekycsdk.NewYorkDynamicColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol QKMRZScannerViewDelegate : AnyObject {
  func mrzScannerView(_ mrzScannerView: nlekycsdk.QKMRZScannerView, didFind scanResult: nlekycsdk.QKMRZScanResult)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class QKMRZScannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isScanning: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var vibrateOnResult: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any nlekycsdk.QKMRZScannerViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var cutoutRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func startScanning()
  @_Concurrency.MainActor @preconcurrency public func stopScanning()
}
extension nlekycsdk.QKMRZScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension Foundation.NSMutableAttributedString {
  public func setAsLink(textToFind: Swift.String, linkURL: Swift.String, color: UIKit.UIColor, font: UIKit.UIFont) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NewYorkAlertController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency final public func isButtonsEmpty() -> Swift.Bool
  public enum Style {
    case actionSheet
    case alert
    public static func == (a: nlekycsdk.NewYorkAlertController.Style, b: nlekycsdk.NewYorkAlertController.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency final public var isTapDismissalEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var textFields: [UIKit.UITextField] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String?, message: Swift.String?, style: nlekycsdk.NewYorkAlertController.Style)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency final public func addButton(_ button: nlekycsdk.NewYorkButton)
  @_Concurrency.MainActor @preconcurrency final public func addButtons(_ buttons: [nlekycsdk.NewYorkButton])
  @_Concurrency.MainActor @preconcurrency final public func addTextField(configurationHandler: ((UIKit.UITextField) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public func addImage(_ image: UIKit.UIImage?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QKMRZScanResult {
  final public let documentImage: UIKit.UIImage
  final public let documentType: Swift.String
  final public let countryCode: Swift.String
  final public let surnames: Swift.String
  final public let givenNames: Swift.String
  final public let documentNumber: Swift.String
  final public let nationalityCountryCode: Swift.String
  final public let birthdate: Foundation.Date?
  final public let sex: Swift.String?
  final public let expiryDate: Foundation.Date?
  final public let personalNumber: Swift.String
  final public let personalNumber2: Swift.String?
  public var faceImage: UIKit.UIImage? {
    get
  }
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Color {
  #warning("The "primary" color asset name resolves to a conflicting Color symbol "primary". Try renaming the asset.")
}
extension nlekycsdk.NewYorkButton.Style : Swift.Equatable {}
extension nlekycsdk.NewYorkButton.Style : Swift.Hashable {}
extension nlekycsdk.NewYorkDynamicColor : Swift.Equatable {}
extension nlekycsdk.NewYorkDynamicColor : Swift.Hashable {}
extension nlekycsdk.NewYorkAlertController.Style : Swift.Equatable {}
extension nlekycsdk.NewYorkAlertController.Style : Swift.Hashable {}
